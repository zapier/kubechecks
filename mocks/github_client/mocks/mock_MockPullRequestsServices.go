// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package github_client

import (
	"context"

	"github.com/google/go-github/v62/github"
	mock "github.com/stretchr/testify/mock"
)

// NewMockPullRequestsServices creates a new instance of MockPullRequestsServices. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPullRequestsServices(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPullRequestsServices {
	mock := &MockPullRequestsServices{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPullRequestsServices is an autogenerated mock type for the PullRequestsServices type
type MockPullRequestsServices struct {
	mock.Mock
}

type MockPullRequestsServices_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPullRequestsServices) EXPECT() *MockPullRequestsServices_Expecter {
	return &MockPullRequestsServices_Expecter{mock: &_m.Mock}
}

// Get provides a mock function for the type MockPullRequestsServices
func (_mock *MockPullRequestsServices) Get(ctx context.Context, owner string, repo string, number int) (*github.PullRequest, *github.Response, error) {
	ret := _mock.Called(ctx, owner, repo, number)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *github.PullRequest
	var r1 *github.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, int) (*github.PullRequest, *github.Response, error)); ok {
		return returnFunc(ctx, owner, repo, number)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, int) *github.PullRequest); ok {
		r0 = returnFunc(ctx, owner, repo, number)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.PullRequest)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, int) *github.Response); ok {
		r1 = returnFunc(ctx, owner, repo, number)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string, string, int) error); ok {
		r2 = returnFunc(ctx, owner, repo, number)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockPullRequestsServices_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockPullRequestsServices_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - owner string
//   - repo string
//   - number int
func (_e *MockPullRequestsServices_Expecter) Get(ctx interface{}, owner interface{}, repo interface{}, number interface{}) *MockPullRequestsServices_Get_Call {
	return &MockPullRequestsServices_Get_Call{Call: _e.mock.On("Get", ctx, owner, repo, number)}
}

func (_c *MockPullRequestsServices_Get_Call) Run(run func(ctx context.Context, owner string, repo string, number int)) *MockPullRequestsServices_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 int
		if args[3] != nil {
			arg3 = args[3].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockPullRequestsServices_Get_Call) Return(pullRequest *github.PullRequest, response *github.Response, err error) *MockPullRequestsServices_Get_Call {
	_c.Call.Return(pullRequest, response, err)
	return _c
}

func (_c *MockPullRequestsServices_Get_Call) RunAndReturn(run func(ctx context.Context, owner string, repo string, number int) (*github.PullRequest, *github.Response, error)) *MockPullRequestsServices_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetRaw provides a mock function for the type MockPullRequestsServices
func (_mock *MockPullRequestsServices) GetRaw(ctx context.Context, owner string, repo string, number int, opts github.RawOptions) (string, *github.Response, error) {
	ret := _mock.Called(ctx, owner, repo, number, opts)

	if len(ret) == 0 {
		panic("no return value specified for GetRaw")
	}

	var r0 string
	var r1 *github.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, int, github.RawOptions) (string, *github.Response, error)); ok {
		return returnFunc(ctx, owner, repo, number, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, int, github.RawOptions) string); ok {
		r0 = returnFunc(ctx, owner, repo, number, opts)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, int, github.RawOptions) *github.Response); ok {
		r1 = returnFunc(ctx, owner, repo, number, opts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string, string, int, github.RawOptions) error); ok {
		r2 = returnFunc(ctx, owner, repo, number, opts)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockPullRequestsServices_GetRaw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRaw'
type MockPullRequestsServices_GetRaw_Call struct {
	*mock.Call
}

// GetRaw is a helper method to define mock.On call
//   - ctx context.Context
//   - owner string
//   - repo string
//   - number int
//   - opts github.RawOptions
func (_e *MockPullRequestsServices_Expecter) GetRaw(ctx interface{}, owner interface{}, repo interface{}, number interface{}, opts interface{}) *MockPullRequestsServices_GetRaw_Call {
	return &MockPullRequestsServices_GetRaw_Call{Call: _e.mock.On("GetRaw", ctx, owner, repo, number, opts)}
}

func (_c *MockPullRequestsServices_GetRaw_Call) Run(run func(ctx context.Context, owner string, repo string, number int, opts github.RawOptions)) *MockPullRequestsServices_GetRaw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 int
		if args[3] != nil {
			arg3 = args[3].(int)
		}
		var arg4 github.RawOptions
		if args[4] != nil {
			arg4 = args[4].(github.RawOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockPullRequestsServices_GetRaw_Call) Return(s string, response *github.Response, err error) *MockPullRequestsServices_GetRaw_Call {
	_c.Call.Return(s, response, err)
	return _c
}

func (_c *MockPullRequestsServices_GetRaw_Call) RunAndReturn(run func(ctx context.Context, owner string, repo string, number int, opts github.RawOptions) (string, *github.Response, error)) *MockPullRequestsServices_GetRaw_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockPullRequestsServices
func (_mock *MockPullRequestsServices) List(ctx context.Context, owner string, repo string, opts *github.PullRequestListOptions) ([]*github.PullRequest, *github.Response, error) {
	ret := _mock.Called(ctx, owner, repo, opts)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*github.PullRequest
	var r1 *github.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, *github.PullRequestListOptions) ([]*github.PullRequest, *github.Response, error)); ok {
		return returnFunc(ctx, owner, repo, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, *github.PullRequestListOptions) []*github.PullRequest); ok {
		r0 = returnFunc(ctx, owner, repo, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.PullRequest)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, *github.PullRequestListOptions) *github.Response); ok {
		r1 = returnFunc(ctx, owner, repo, opts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string, string, *github.PullRequestListOptions) error); ok {
		r2 = returnFunc(ctx, owner, repo, opts)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockPullRequestsServices_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockPullRequestsServices_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - owner string
//   - repo string
//   - opts *github.PullRequestListOptions
func (_e *MockPullRequestsServices_Expecter) List(ctx interface{}, owner interface{}, repo interface{}, opts interface{}) *MockPullRequestsServices_List_Call {
	return &MockPullRequestsServices_List_Call{Call: _e.mock.On("List", ctx, owner, repo, opts)}
}

func (_c *MockPullRequestsServices_List_Call) Run(run func(ctx context.Context, owner string, repo string, opts *github.PullRequestListOptions)) *MockPullRequestsServices_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 *github.PullRequestListOptions
		if args[3] != nil {
			arg3 = args[3].(*github.PullRequestListOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockPullRequestsServices_List_Call) Return(pullRequests []*github.PullRequest, response *github.Response, err error) *MockPullRequestsServices_List_Call {
	_c.Call.Return(pullRequests, response, err)
	return _c
}

func (_c *MockPullRequestsServices_List_Call) RunAndReturn(run func(ctx context.Context, owner string, repo string, opts *github.PullRequestListOptions) ([]*github.PullRequest, *github.Response, error)) *MockPullRequestsServices_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListFiles provides a mock function for the type MockPullRequestsServices
func (_mock *MockPullRequestsServices) ListFiles(ctx context.Context, owner string, repo string, number int, opts *github.ListOptions) ([]*github.CommitFile, *github.Response, error) {
	ret := _mock.Called(ctx, owner, repo, number, opts)

	if len(ret) == 0 {
		panic("no return value specified for ListFiles")
	}

	var r0 []*github.CommitFile
	var r1 *github.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, int, *github.ListOptions) ([]*github.CommitFile, *github.Response, error)); ok {
		return returnFunc(ctx, owner, repo, number, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, int, *github.ListOptions) []*github.CommitFile); ok {
		r0 = returnFunc(ctx, owner, repo, number, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.CommitFile)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, int, *github.ListOptions) *github.Response); ok {
		r1 = returnFunc(ctx, owner, repo, number, opts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string, string, int, *github.ListOptions) error); ok {
		r2 = returnFunc(ctx, owner, repo, number, opts)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockPullRequestsServices_ListFiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFiles'
type MockPullRequestsServices_ListFiles_Call struct {
	*mock.Call
}

// ListFiles is a helper method to define mock.On call
//   - ctx context.Context
//   - owner string
//   - repo string
//   - number int
//   - opts *github.ListOptions
func (_e *MockPullRequestsServices_Expecter) ListFiles(ctx interface{}, owner interface{}, repo interface{}, number interface{}, opts interface{}) *MockPullRequestsServices_ListFiles_Call {
	return &MockPullRequestsServices_ListFiles_Call{Call: _e.mock.On("ListFiles", ctx, owner, repo, number, opts)}
}

func (_c *MockPullRequestsServices_ListFiles_Call) Run(run func(ctx context.Context, owner string, repo string, number int, opts *github.ListOptions)) *MockPullRequestsServices_ListFiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 int
		if args[3] != nil {
			arg3 = args[3].(int)
		}
		var arg4 *github.ListOptions
		if args[4] != nil {
			arg4 = args[4].(*github.ListOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockPullRequestsServices_ListFiles_Call) Return(commitFiles []*github.CommitFile, response *github.Response, err error) *MockPullRequestsServices_ListFiles_Call {
	_c.Call.Return(commitFiles, response, err)
	return _c
}

func (_c *MockPullRequestsServices_ListFiles_Call) RunAndReturn(run func(ctx context.Context, owner string, repo string, number int, opts *github.ListOptions) ([]*github.CommitFile, *github.Response, error)) *MockPullRequestsServices_ListFiles_Call {
	_c.Call.Return(run)
	return _c
}
