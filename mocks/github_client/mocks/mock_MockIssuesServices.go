// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package github_client

import (
	"context"

	"github.com/google/go-github/v62/github"
	mock "github.com/stretchr/testify/mock"
)

// NewMockIssuesServices creates a new instance of MockIssuesServices. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIssuesServices(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIssuesServices {
	mock := &MockIssuesServices{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIssuesServices is an autogenerated mock type for the IssuesServices type
type MockIssuesServices struct {
	mock.Mock
}

type MockIssuesServices_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIssuesServices) EXPECT() *MockIssuesServices_Expecter {
	return &MockIssuesServices_Expecter{mock: &_m.Mock}
}

// CreateComment provides a mock function for the type MockIssuesServices
func (_mock *MockIssuesServices) CreateComment(ctx context.Context, owner string, repo string, number int, comment *github.IssueComment) (*github.IssueComment, *github.Response, error) {
	ret := _mock.Called(ctx, owner, repo, number, comment)

	if len(ret) == 0 {
		panic("no return value specified for CreateComment")
	}

	var r0 *github.IssueComment
	var r1 *github.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, int, *github.IssueComment) (*github.IssueComment, *github.Response, error)); ok {
		return returnFunc(ctx, owner, repo, number, comment)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, int, *github.IssueComment) *github.IssueComment); ok {
		r0 = returnFunc(ctx, owner, repo, number, comment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.IssueComment)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, int, *github.IssueComment) *github.Response); ok {
		r1 = returnFunc(ctx, owner, repo, number, comment)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string, string, int, *github.IssueComment) error); ok {
		r2 = returnFunc(ctx, owner, repo, number, comment)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockIssuesServices_CreateComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateComment'
type MockIssuesServices_CreateComment_Call struct {
	*mock.Call
}

// CreateComment is a helper method to define mock.On call
//   - ctx context.Context
//   - owner string
//   - repo string
//   - number int
//   - comment *github.IssueComment
func (_e *MockIssuesServices_Expecter) CreateComment(ctx interface{}, owner interface{}, repo interface{}, number interface{}, comment interface{}) *MockIssuesServices_CreateComment_Call {
	return &MockIssuesServices_CreateComment_Call{Call: _e.mock.On("CreateComment", ctx, owner, repo, number, comment)}
}

func (_c *MockIssuesServices_CreateComment_Call) Run(run func(ctx context.Context, owner string, repo string, number int, comment *github.IssueComment)) *MockIssuesServices_CreateComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 int
		if args[3] != nil {
			arg3 = args[3].(int)
		}
		var arg4 *github.IssueComment
		if args[4] != nil {
			arg4 = args[4].(*github.IssueComment)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockIssuesServices_CreateComment_Call) Return(issueComment *github.IssueComment, response *github.Response, err error) *MockIssuesServices_CreateComment_Call {
	_c.Call.Return(issueComment, response, err)
	return _c
}

func (_c *MockIssuesServices_CreateComment_Call) RunAndReturn(run func(ctx context.Context, owner string, repo string, number int, comment *github.IssueComment) (*github.IssueComment, *github.Response, error)) *MockIssuesServices_CreateComment_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteComment provides a mock function for the type MockIssuesServices
func (_mock *MockIssuesServices) DeleteComment(ctx context.Context, owner string, repo string, commentID int64) (*github.Response, error) {
	ret := _mock.Called(ctx, owner, repo, commentID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteComment")
	}

	var r0 *github.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, int64) (*github.Response, error)); ok {
		return returnFunc(ctx, owner, repo, commentID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, int64) *github.Response); ok {
		r0 = returnFunc(ctx, owner, repo, commentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, int64) error); ok {
		r1 = returnFunc(ctx, owner, repo, commentID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIssuesServices_DeleteComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteComment'
type MockIssuesServices_DeleteComment_Call struct {
	*mock.Call
}

// DeleteComment is a helper method to define mock.On call
//   - ctx context.Context
//   - owner string
//   - repo string
//   - commentID int64
func (_e *MockIssuesServices_Expecter) DeleteComment(ctx interface{}, owner interface{}, repo interface{}, commentID interface{}) *MockIssuesServices_DeleteComment_Call {
	return &MockIssuesServices_DeleteComment_Call{Call: _e.mock.On("DeleteComment", ctx, owner, repo, commentID)}
}

func (_c *MockIssuesServices_DeleteComment_Call) Run(run func(ctx context.Context, owner string, repo string, commentID int64)) *MockIssuesServices_DeleteComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 int64
		if args[3] != nil {
			arg3 = args[3].(int64)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockIssuesServices_DeleteComment_Call) Return(response *github.Response, err error) *MockIssuesServices_DeleteComment_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockIssuesServices_DeleteComment_Call) RunAndReturn(run func(ctx context.Context, owner string, repo string, commentID int64) (*github.Response, error)) *MockIssuesServices_DeleteComment_Call {
	_c.Call.Return(run)
	return _c
}

// EditComment provides a mock function for the type MockIssuesServices
func (_mock *MockIssuesServices) EditComment(ctx context.Context, owner string, repo string, commentID int64, comment *github.IssueComment) (*github.IssueComment, *github.Response, error) {
	ret := _mock.Called(ctx, owner, repo, commentID, comment)

	if len(ret) == 0 {
		panic("no return value specified for EditComment")
	}

	var r0 *github.IssueComment
	var r1 *github.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, int64, *github.IssueComment) (*github.IssueComment, *github.Response, error)); ok {
		return returnFunc(ctx, owner, repo, commentID, comment)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, int64, *github.IssueComment) *github.IssueComment); ok {
		r0 = returnFunc(ctx, owner, repo, commentID, comment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.IssueComment)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, int64, *github.IssueComment) *github.Response); ok {
		r1 = returnFunc(ctx, owner, repo, commentID, comment)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string, string, int64, *github.IssueComment) error); ok {
		r2 = returnFunc(ctx, owner, repo, commentID, comment)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockIssuesServices_EditComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EditComment'
type MockIssuesServices_EditComment_Call struct {
	*mock.Call
}

// EditComment is a helper method to define mock.On call
//   - ctx context.Context
//   - owner string
//   - repo string
//   - commentID int64
//   - comment *github.IssueComment
func (_e *MockIssuesServices_Expecter) EditComment(ctx interface{}, owner interface{}, repo interface{}, commentID interface{}, comment interface{}) *MockIssuesServices_EditComment_Call {
	return &MockIssuesServices_EditComment_Call{Call: _e.mock.On("EditComment", ctx, owner, repo, commentID, comment)}
}

func (_c *MockIssuesServices_EditComment_Call) Run(run func(ctx context.Context, owner string, repo string, commentID int64, comment *github.IssueComment)) *MockIssuesServices_EditComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 int64
		if args[3] != nil {
			arg3 = args[3].(int64)
		}
		var arg4 *github.IssueComment
		if args[4] != nil {
			arg4 = args[4].(*github.IssueComment)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockIssuesServices_EditComment_Call) Return(issueComment *github.IssueComment, response *github.Response, err error) *MockIssuesServices_EditComment_Call {
	_c.Call.Return(issueComment, response, err)
	return _c
}

func (_c *MockIssuesServices_EditComment_Call) RunAndReturn(run func(ctx context.Context, owner string, repo string, commentID int64, comment *github.IssueComment) (*github.IssueComment, *github.Response, error)) *MockIssuesServices_EditComment_Call {
	_c.Call.Return(run)
	return _c
}

// ListComments provides a mock function for the type MockIssuesServices
func (_mock *MockIssuesServices) ListComments(ctx context.Context, owner string, repo string, number int, opts *github.IssueListCommentsOptions) ([]*github.IssueComment, *github.Response, error) {
	ret := _mock.Called(ctx, owner, repo, number, opts)

	if len(ret) == 0 {
		panic("no return value specified for ListComments")
	}

	var r0 []*github.IssueComment
	var r1 *github.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, int, *github.IssueListCommentsOptions) ([]*github.IssueComment, *github.Response, error)); ok {
		return returnFunc(ctx, owner, repo, number, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, int, *github.IssueListCommentsOptions) []*github.IssueComment); ok {
		r0 = returnFunc(ctx, owner, repo, number, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.IssueComment)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, int, *github.IssueListCommentsOptions) *github.Response); ok {
		r1 = returnFunc(ctx, owner, repo, number, opts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string, string, int, *github.IssueListCommentsOptions) error); ok {
		r2 = returnFunc(ctx, owner, repo, number, opts)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockIssuesServices_ListComments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListComments'
type MockIssuesServices_ListComments_Call struct {
	*mock.Call
}

// ListComments is a helper method to define mock.On call
//   - ctx context.Context
//   - owner string
//   - repo string
//   - number int
//   - opts *github.IssueListCommentsOptions
func (_e *MockIssuesServices_Expecter) ListComments(ctx interface{}, owner interface{}, repo interface{}, number interface{}, opts interface{}) *MockIssuesServices_ListComments_Call {
	return &MockIssuesServices_ListComments_Call{Call: _e.mock.On("ListComments", ctx, owner, repo, number, opts)}
}

func (_c *MockIssuesServices_ListComments_Call) Run(run func(ctx context.Context, owner string, repo string, number int, opts *github.IssueListCommentsOptions)) *MockIssuesServices_ListComments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 int
		if args[3] != nil {
			arg3 = args[3].(int)
		}
		var arg4 *github.IssueListCommentsOptions
		if args[4] != nil {
			arg4 = args[4].(*github.IssueListCommentsOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockIssuesServices_ListComments_Call) Return(issueComments []*github.IssueComment, response *github.Response, err error) *MockIssuesServices_ListComments_Call {
	_c.Call.Return(issueComments, response, err)
	return _c
}

func (_c *MockIssuesServices_ListComments_Call) RunAndReturn(run func(ctx context.Context, owner string, repo string, number int, opts *github.IssueListCommentsOptions) ([]*github.IssueComment, *github.Response, error)) *MockIssuesServices_ListComments_Call {
	_c.Call.Return(run)
	return _c
}
