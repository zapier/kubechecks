// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package generator

import (
	"context"

	"github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1"
	mock "github.com/stretchr/testify/mock"
	"github.com/zapier/kubechecks/pkg/container"
)

// NewMockAppsGenerator creates a new instance of MockAppsGenerator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAppsGenerator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAppsGenerator {
	mock := &MockAppsGenerator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAppsGenerator is an autogenerated mock type for the AppsGenerator type
type MockAppsGenerator struct {
	mock.Mock
}

type MockAppsGenerator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAppsGenerator) EXPECT() *MockAppsGenerator_Expecter {
	return &MockAppsGenerator_Expecter{mock: &_m.Mock}
}

// GenerateApplicationSetApps provides a mock function for the type MockAppsGenerator
func (_mock *MockAppsGenerator) GenerateApplicationSetApps(ctx context.Context, appset v1alpha1.ApplicationSet, ctr *container.Container) ([]v1alpha1.Application, error) {
	ret := _mock.Called(ctx, appset, ctr)

	if len(ret) == 0 {
		panic("no return value specified for GenerateApplicationSetApps")
	}

	var r0 []v1alpha1.Application
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, v1alpha1.ApplicationSet, *container.Container) ([]v1alpha1.Application, error)); ok {
		return returnFunc(ctx, appset, ctr)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, v1alpha1.ApplicationSet, *container.Container) []v1alpha1.Application); ok {
		r0 = returnFunc(ctx, appset, ctr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]v1alpha1.Application)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, v1alpha1.ApplicationSet, *container.Container) error); ok {
		r1 = returnFunc(ctx, appset, ctr)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAppsGenerator_GenerateApplicationSetApps_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateApplicationSetApps'
type MockAppsGenerator_GenerateApplicationSetApps_Call struct {
	*mock.Call
}

// GenerateApplicationSetApps is a helper method to define mock.On call
//   - ctx context.Context
//   - appset v1alpha1.ApplicationSet
//   - ctr *container.Container
func (_e *MockAppsGenerator_Expecter) GenerateApplicationSetApps(ctx interface{}, appset interface{}, ctr interface{}) *MockAppsGenerator_GenerateApplicationSetApps_Call {
	return &MockAppsGenerator_GenerateApplicationSetApps_Call{Call: _e.mock.On("GenerateApplicationSetApps", ctx, appset, ctr)}
}

func (_c *MockAppsGenerator_GenerateApplicationSetApps_Call) Run(run func(ctx context.Context, appset v1alpha1.ApplicationSet, ctr *container.Container)) *MockAppsGenerator_GenerateApplicationSetApps_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 v1alpha1.ApplicationSet
		if args[1] != nil {
			arg1 = args[1].(v1alpha1.ApplicationSet)
		}
		var arg2 *container.Container
		if args[2] != nil {
			arg2 = args[2].(*container.Container)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockAppsGenerator_GenerateApplicationSetApps_Call) Return(applications []v1alpha1.Application, err error) *MockAppsGenerator_GenerateApplicationSetApps_Call {
	_c.Call.Return(applications, err)
	return _c
}

func (_c *MockAppsGenerator_GenerateApplicationSetApps_Call) RunAndReturn(run func(ctx context.Context, appset v1alpha1.ApplicationSet, ctr *container.Container) ([]v1alpha1.Application, error)) *MockAppsGenerator_GenerateApplicationSetApps_Call {
	_c.Call.Return(run)
	return _c
}
