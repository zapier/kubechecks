// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package gitlab_client

import (
	mock "github.com/stretchr/testify/mock"
	"github.com/xanzy/go-gitlab"
)

// NewMockCommitsServices creates a new instance of MockCommitsServices. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCommitsServices(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCommitsServices {
	mock := &MockCommitsServices{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCommitsServices is an autogenerated mock type for the CommitsServices type
type MockCommitsServices struct {
	mock.Mock
}

type MockCommitsServices_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCommitsServices) EXPECT() *MockCommitsServices_Expecter {
	return &MockCommitsServices_Expecter{mock: &_m.Mock}
}

// SetCommitStatus provides a mock function for the type MockCommitsServices
func (_mock *MockCommitsServices) SetCommitStatus(pid interface{}, sha string, opt *gitlab.SetCommitStatusOptions, options ...gitlab.RequestOptionFunc) (*gitlab.CommitStatus, *gitlab.Response, error) {
	var tmpRet mock.Arguments
	if len(options) > 0 {
		tmpRet = _mock.Called(pid, sha, opt, options)
	} else {
		tmpRet = _mock.Called(pid, sha, opt)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for SetCommitStatus")
	}

	var r0 *gitlab.CommitStatus
	var r1 *gitlab.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(interface{}, string, *gitlab.SetCommitStatusOptions, ...gitlab.RequestOptionFunc) (*gitlab.CommitStatus, *gitlab.Response, error)); ok {
		return returnFunc(pid, sha, opt, options...)
	}
	if returnFunc, ok := ret.Get(0).(func(interface{}, string, *gitlab.SetCommitStatusOptions, ...gitlab.RequestOptionFunc) *gitlab.CommitStatus); ok {
		r0 = returnFunc(pid, sha, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.CommitStatus)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(interface{}, string, *gitlab.SetCommitStatusOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = returnFunc(pid, sha, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(interface{}, string, *gitlab.SetCommitStatusOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = returnFunc(pid, sha, opt, options...)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockCommitsServices_SetCommitStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetCommitStatus'
type MockCommitsServices_SetCommitStatus_Call struct {
	*mock.Call
}

// SetCommitStatus is a helper method to define mock.On call
//   - pid interface{}
//   - sha string
//   - opt *gitlab.SetCommitStatusOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *MockCommitsServices_Expecter) SetCommitStatus(pid interface{}, sha interface{}, opt interface{}, options ...interface{}) *MockCommitsServices_SetCommitStatus_Call {
	return &MockCommitsServices_SetCommitStatus_Call{Call: _e.mock.On("SetCommitStatus",
		append([]interface{}{pid, sha, opt}, options...)...)}
}

func (_c *MockCommitsServices_SetCommitStatus_Call) Run(run func(pid interface{}, sha string, opt *gitlab.SetCommitStatusOptions, options ...gitlab.RequestOptionFunc)) *MockCommitsServices_SetCommitStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 interface{}
		if args[0] != nil {
			arg0 = args[0].(interface{})
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *gitlab.SetCommitStatusOptions
		if args[2] != nil {
			arg2 = args[2].(*gitlab.SetCommitStatusOptions)
		}
		var arg3 []gitlab.RequestOptionFunc
		var variadicArgs []gitlab.RequestOptionFunc
		if len(args) > 3 {
			variadicArgs = args[3].([]gitlab.RequestOptionFunc)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockCommitsServices_SetCommitStatus_Call) Return(commitStatus *gitlab.CommitStatus, response *gitlab.Response, err error) *MockCommitsServices_SetCommitStatus_Call {
	_c.Call.Return(commitStatus, response, err)
	return _c
}

func (_c *MockCommitsServices_SetCommitStatus_Call) RunAndReturn(run func(pid interface{}, sha string, opt *gitlab.SetCommitStatusOptions, options ...gitlab.RequestOptionFunc) (*gitlab.CommitStatus, *gitlab.Response, error)) *MockCommitsServices_SetCommitStatus_Call {
	_c.Call.Return(run)
	return _c
}
