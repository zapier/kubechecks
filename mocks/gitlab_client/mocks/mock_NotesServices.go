// Code generated by mockery v2.37.1. DO NOT EDIT.

package gitlab_client

import (
	gitlab "github.com/xanzy/go-gitlab"

	mock "github.com/stretchr/testify/mock"
)

// MockNotesServices is an autogenerated mock type for the NotesServices type
type MockNotesServices struct {
	mock.Mock
}

type MockNotesServices_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNotesServices) EXPECT() *MockNotesServices_Expecter {
	return &MockNotesServices_Expecter{mock: &_m.Mock}
}

// CreateMergeRequestNote provides a mock function with given fields: pid, mergeRequest, opt, options
func (_m *MockNotesServices) CreateMergeRequestNote(pid interface{}, mergeRequest int, opt *gitlab.CreateMergeRequestNoteOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Note, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, mergeRequest, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gitlab.Note
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.CreateMergeRequestNoteOptions, ...gitlab.RequestOptionFunc) (*gitlab.Note, *gitlab.Response, error)); ok {
		return rf(pid, mergeRequest, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.CreateMergeRequestNoteOptions, ...gitlab.RequestOptionFunc) *gitlab.Note); ok {
		r0 = rf(pid, mergeRequest, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Note)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, *gitlab.CreateMergeRequestNoteOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, mergeRequest, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, *gitlab.CreateMergeRequestNoteOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, mergeRequest, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockNotesServices_CreateMergeRequestNote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMergeRequestNote'
type MockNotesServices_CreateMergeRequestNote_Call struct {
	*mock.Call
}

// CreateMergeRequestNote is a helper method to define mock.On call
//   - pid interface{}
//   - mergeRequest int
//   - opt *gitlab.CreateMergeRequestNoteOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *MockNotesServices_Expecter) CreateMergeRequestNote(pid interface{}, mergeRequest interface{}, opt interface{}, options ...interface{}) *MockNotesServices_CreateMergeRequestNote_Call {
	return &MockNotesServices_CreateMergeRequestNote_Call{Call: _e.mock.On("CreateMergeRequestNote",
		append([]interface{}{pid, mergeRequest, opt}, options...)...)}
}

func (_c *MockNotesServices_CreateMergeRequestNote_Call) Run(run func(pid interface{}, mergeRequest int, opt *gitlab.CreateMergeRequestNoteOptions, options ...gitlab.RequestOptionFunc)) *MockNotesServices_CreateMergeRequestNote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), args[2].(*gitlab.CreateMergeRequestNoteOptions), variadicArgs...)
	})
	return _c
}

func (_c *MockNotesServices_CreateMergeRequestNote_Call) Return(_a0 *gitlab.Note, _a1 *gitlab.Response, _a2 error) *MockNotesServices_CreateMergeRequestNote_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockNotesServices_CreateMergeRequestNote_Call) RunAndReturn(run func(interface{}, int, *gitlab.CreateMergeRequestNoteOptions, ...gitlab.RequestOptionFunc) (*gitlab.Note, *gitlab.Response, error)) *MockNotesServices_CreateMergeRequestNote_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteMergeRequestNote provides a mock function with given fields: pid, mergeRequest, note, options
func (_m *MockNotesServices) DeleteMergeRequestNote(pid interface{}, mergeRequest int, note int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, mergeRequest, note)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gitlab.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, int, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)); ok {
		return rf(pid, mergeRequest, note, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r0 = rf(pid, mergeRequest, note, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, int, ...gitlab.RequestOptionFunc) error); ok {
		r1 = rf(pid, mergeRequest, note, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNotesServices_DeleteMergeRequestNote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMergeRequestNote'
type MockNotesServices_DeleteMergeRequestNote_Call struct {
	*mock.Call
}

// DeleteMergeRequestNote is a helper method to define mock.On call
//   - pid interface{}
//   - mergeRequest int
//   - note int
//   - options ...gitlab.RequestOptionFunc
func (_e *MockNotesServices_Expecter) DeleteMergeRequestNote(pid interface{}, mergeRequest interface{}, note interface{}, options ...interface{}) *MockNotesServices_DeleteMergeRequestNote_Call {
	return &MockNotesServices_DeleteMergeRequestNote_Call{Call: _e.mock.On("DeleteMergeRequestNote",
		append([]interface{}{pid, mergeRequest, note}, options...)...)}
}

func (_c *MockNotesServices_DeleteMergeRequestNote_Call) Run(run func(pid interface{}, mergeRequest int, note int, options ...gitlab.RequestOptionFunc)) *MockNotesServices_DeleteMergeRequestNote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), args[2].(int), variadicArgs...)
	})
	return _c
}

func (_c *MockNotesServices_DeleteMergeRequestNote_Call) Return(_a0 *gitlab.Response, _a1 error) *MockNotesServices_DeleteMergeRequestNote_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNotesServices_DeleteMergeRequestNote_Call) RunAndReturn(run func(interface{}, int, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockNotesServices_DeleteMergeRequestNote_Call {
	_c.Call.Return(run)
	return _c
}

// ListMergeRequestNotes provides a mock function with given fields: pid, mergeRequest, opt, options
func (_m *MockNotesServices) ListMergeRequestNotes(pid interface{}, mergeRequest int, opt *gitlab.ListMergeRequestNotesOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Note, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, mergeRequest, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []*gitlab.Note
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.ListMergeRequestNotesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.Note, *gitlab.Response, error)); ok {
		return rf(pid, mergeRequest, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.ListMergeRequestNotesOptions, ...gitlab.RequestOptionFunc) []*gitlab.Note); ok {
		r0 = rf(pid, mergeRequest, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.Note)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, *gitlab.ListMergeRequestNotesOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, mergeRequest, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, *gitlab.ListMergeRequestNotesOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, mergeRequest, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockNotesServices_ListMergeRequestNotes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListMergeRequestNotes'
type MockNotesServices_ListMergeRequestNotes_Call struct {
	*mock.Call
}

// ListMergeRequestNotes is a helper method to define mock.On call
//   - pid interface{}
//   - mergeRequest int
//   - opt *gitlab.ListMergeRequestNotesOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *MockNotesServices_Expecter) ListMergeRequestNotes(pid interface{}, mergeRequest interface{}, opt interface{}, options ...interface{}) *MockNotesServices_ListMergeRequestNotes_Call {
	return &MockNotesServices_ListMergeRequestNotes_Call{Call: _e.mock.On("ListMergeRequestNotes",
		append([]interface{}{pid, mergeRequest, opt}, options...)...)}
}

func (_c *MockNotesServices_ListMergeRequestNotes_Call) Run(run func(pid interface{}, mergeRequest int, opt *gitlab.ListMergeRequestNotesOptions, options ...gitlab.RequestOptionFunc)) *MockNotesServices_ListMergeRequestNotes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), args[2].(*gitlab.ListMergeRequestNotesOptions), variadicArgs...)
	})
	return _c
}

func (_c *MockNotesServices_ListMergeRequestNotes_Call) Return(_a0 []*gitlab.Note, _a1 *gitlab.Response, _a2 error) *MockNotesServices_ListMergeRequestNotes_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockNotesServices_ListMergeRequestNotes_Call) RunAndReturn(run func(interface{}, int, *gitlab.ListMergeRequestNotesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.Note, *gitlab.Response, error)) *MockNotesServices_ListMergeRequestNotes_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateMergeRequestNote provides a mock function with given fields: pid, mergeRequest, note, opt, options
func (_m *MockNotesServices) UpdateMergeRequestNote(pid interface{}, mergeRequest int, note int, opt *gitlab.UpdateMergeRequestNoteOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Note, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, mergeRequest, note, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gitlab.Note
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, int, *gitlab.UpdateMergeRequestNoteOptions, ...gitlab.RequestOptionFunc) (*gitlab.Note, *gitlab.Response, error)); ok {
		return rf(pid, mergeRequest, note, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, int, *gitlab.UpdateMergeRequestNoteOptions, ...gitlab.RequestOptionFunc) *gitlab.Note); ok {
		r0 = rf(pid, mergeRequest, note, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Note)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, int, *gitlab.UpdateMergeRequestNoteOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, mergeRequest, note, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, int, *gitlab.UpdateMergeRequestNoteOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, mergeRequest, note, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockNotesServices_UpdateMergeRequestNote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateMergeRequestNote'
type MockNotesServices_UpdateMergeRequestNote_Call struct {
	*mock.Call
}

// UpdateMergeRequestNote is a helper method to define mock.On call
//   - pid interface{}
//   - mergeRequest int
//   - note int
//   - opt *gitlab.UpdateMergeRequestNoteOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *MockNotesServices_Expecter) UpdateMergeRequestNote(pid interface{}, mergeRequest interface{}, note interface{}, opt interface{}, options ...interface{}) *MockNotesServices_UpdateMergeRequestNote_Call {
	return &MockNotesServices_UpdateMergeRequestNote_Call{Call: _e.mock.On("UpdateMergeRequestNote",
		append([]interface{}{pid, mergeRequest, note, opt}, options...)...)}
}

func (_c *MockNotesServices_UpdateMergeRequestNote_Call) Run(run func(pid interface{}, mergeRequest int, note int, opt *gitlab.UpdateMergeRequestNoteOptions, options ...gitlab.RequestOptionFunc)) *MockNotesServices_UpdateMergeRequestNote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), args[2].(int), args[3].(*gitlab.UpdateMergeRequestNoteOptions), variadicArgs...)
	})
	return _c
}

func (_c *MockNotesServices_UpdateMergeRequestNote_Call) Return(_a0 *gitlab.Note, _a1 *gitlab.Response, _a2 error) *MockNotesServices_UpdateMergeRequestNote_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockNotesServices_UpdateMergeRequestNote_Call) RunAndReturn(run func(interface{}, int, int, *gitlab.UpdateMergeRequestNoteOptions, ...gitlab.RequestOptionFunc) (*gitlab.Note, *gitlab.Response, error)) *MockNotesServices_UpdateMergeRequestNote_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNotesServices creates a new instance of MockNotesServices. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNotesServices(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNotesServices {
	mock := &MockNotesServices{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
