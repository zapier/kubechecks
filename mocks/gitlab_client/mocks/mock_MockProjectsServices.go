// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package gitlab_client

import (
	mock "github.com/stretchr/testify/mock"
	"github.com/xanzy/go-gitlab"
)

// NewMockProjectsServices creates a new instance of MockProjectsServices. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProjectsServices(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProjectsServices {
	mock := &MockProjectsServices{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockProjectsServices is an autogenerated mock type for the ProjectsServices type
type MockProjectsServices struct {
	mock.Mock
}

type MockProjectsServices_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProjectsServices) EXPECT() *MockProjectsServices_Expecter {
	return &MockProjectsServices_Expecter{mock: &_m.Mock}
}

// AddProjectHook provides a mock function for the type MockProjectsServices
func (_mock *MockProjectsServices) AddProjectHook(pid interface{}, opt *gitlab.AddProjectHookOptions, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectHook, *gitlab.Response, error) {
	var tmpRet mock.Arguments
	if len(options) > 0 {
		tmpRet = _mock.Called(pid, opt, options)
	} else {
		tmpRet = _mock.Called(pid, opt)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for AddProjectHook")
	}

	var r0 *gitlab.ProjectHook
	var r1 *gitlab.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(interface{}, *gitlab.AddProjectHookOptions, ...gitlab.RequestOptionFunc) (*gitlab.ProjectHook, *gitlab.Response, error)); ok {
		return returnFunc(pid, opt, options...)
	}
	if returnFunc, ok := ret.Get(0).(func(interface{}, *gitlab.AddProjectHookOptions, ...gitlab.RequestOptionFunc) *gitlab.ProjectHook); ok {
		r0 = returnFunc(pid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.ProjectHook)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(interface{}, *gitlab.AddProjectHookOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = returnFunc(pid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(interface{}, *gitlab.AddProjectHookOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = returnFunc(pid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockProjectsServices_AddProjectHook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddProjectHook'
type MockProjectsServices_AddProjectHook_Call struct {
	*mock.Call
}

// AddProjectHook is a helper method to define mock.On call
//   - pid interface{}
//   - opt *gitlab.AddProjectHookOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *MockProjectsServices_Expecter) AddProjectHook(pid interface{}, opt interface{}, options ...interface{}) *MockProjectsServices_AddProjectHook_Call {
	return &MockProjectsServices_AddProjectHook_Call{Call: _e.mock.On("AddProjectHook",
		append([]interface{}{pid, opt}, options...)...)}
}

func (_c *MockProjectsServices_AddProjectHook_Call) Run(run func(pid interface{}, opt *gitlab.AddProjectHookOptions, options ...gitlab.RequestOptionFunc)) *MockProjectsServices_AddProjectHook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 interface{}
		if args[0] != nil {
			arg0 = args[0].(interface{})
		}
		var arg1 *gitlab.AddProjectHookOptions
		if args[1] != nil {
			arg1 = args[1].(*gitlab.AddProjectHookOptions)
		}
		var arg2 []gitlab.RequestOptionFunc
		var variadicArgs []gitlab.RequestOptionFunc
		if len(args) > 2 {
			variadicArgs = args[2].([]gitlab.RequestOptionFunc)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockProjectsServices_AddProjectHook_Call) Return(projectHook *gitlab.ProjectHook, response *gitlab.Response, err error) *MockProjectsServices_AddProjectHook_Call {
	_c.Call.Return(projectHook, response, err)
	return _c
}

func (_c *MockProjectsServices_AddProjectHook_Call) RunAndReturn(run func(pid interface{}, opt *gitlab.AddProjectHookOptions, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectHook, *gitlab.Response, error)) *MockProjectsServices_AddProjectHook_Call {
	_c.Call.Return(run)
	return _c
}

// EditProjectHook provides a mock function for the type MockProjectsServices
func (_mock *MockProjectsServices) EditProjectHook(pid interface{}, hook int, opt *gitlab.EditProjectHookOptions, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectHook, *gitlab.Response, error) {
	var tmpRet mock.Arguments
	if len(options) > 0 {
		tmpRet = _mock.Called(pid, hook, opt, options)
	} else {
		tmpRet = _mock.Called(pid, hook, opt)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for EditProjectHook")
	}

	var r0 *gitlab.ProjectHook
	var r1 *gitlab.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(interface{}, int, *gitlab.EditProjectHookOptions, ...gitlab.RequestOptionFunc) (*gitlab.ProjectHook, *gitlab.Response, error)); ok {
		return returnFunc(pid, hook, opt, options...)
	}
	if returnFunc, ok := ret.Get(0).(func(interface{}, int, *gitlab.EditProjectHookOptions, ...gitlab.RequestOptionFunc) *gitlab.ProjectHook); ok {
		r0 = returnFunc(pid, hook, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.ProjectHook)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(interface{}, int, *gitlab.EditProjectHookOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = returnFunc(pid, hook, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(interface{}, int, *gitlab.EditProjectHookOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = returnFunc(pid, hook, opt, options...)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockProjectsServices_EditProjectHook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EditProjectHook'
type MockProjectsServices_EditProjectHook_Call struct {
	*mock.Call
}

// EditProjectHook is a helper method to define mock.On call
//   - pid interface{}
//   - hook int
//   - opt *gitlab.EditProjectHookOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *MockProjectsServices_Expecter) EditProjectHook(pid interface{}, hook interface{}, opt interface{}, options ...interface{}) *MockProjectsServices_EditProjectHook_Call {
	return &MockProjectsServices_EditProjectHook_Call{Call: _e.mock.On("EditProjectHook",
		append([]interface{}{pid, hook, opt}, options...)...)}
}

func (_c *MockProjectsServices_EditProjectHook_Call) Run(run func(pid interface{}, hook int, opt *gitlab.EditProjectHookOptions, options ...gitlab.RequestOptionFunc)) *MockProjectsServices_EditProjectHook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 interface{}
		if args[0] != nil {
			arg0 = args[0].(interface{})
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 *gitlab.EditProjectHookOptions
		if args[2] != nil {
			arg2 = args[2].(*gitlab.EditProjectHookOptions)
		}
		var arg3 []gitlab.RequestOptionFunc
		var variadicArgs []gitlab.RequestOptionFunc
		if len(args) > 3 {
			variadicArgs = args[3].([]gitlab.RequestOptionFunc)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockProjectsServices_EditProjectHook_Call) Return(projectHook *gitlab.ProjectHook, response *gitlab.Response, err error) *MockProjectsServices_EditProjectHook_Call {
	_c.Call.Return(projectHook, response, err)
	return _c
}

func (_c *MockProjectsServices_EditProjectHook_Call) RunAndReturn(run func(pid interface{}, hook int, opt *gitlab.EditProjectHookOptions, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectHook, *gitlab.Response, error)) *MockProjectsServices_EditProjectHook_Call {
	_c.Call.Return(run)
	return _c
}

// GetProject provides a mock function for the type MockProjectsServices
func (_mock *MockProjectsServices) GetProject(pid interface{}, opt *gitlab.GetProjectOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Project, *gitlab.Response, error) {
	var tmpRet mock.Arguments
	if len(options) > 0 {
		tmpRet = _mock.Called(pid, opt, options)
	} else {
		tmpRet = _mock.Called(pid, opt)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetProject")
	}

	var r0 *gitlab.Project
	var r1 *gitlab.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(interface{}, *gitlab.GetProjectOptions, ...gitlab.RequestOptionFunc) (*gitlab.Project, *gitlab.Response, error)); ok {
		return returnFunc(pid, opt, options...)
	}
	if returnFunc, ok := ret.Get(0).(func(interface{}, *gitlab.GetProjectOptions, ...gitlab.RequestOptionFunc) *gitlab.Project); ok {
		r0 = returnFunc(pid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Project)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(interface{}, *gitlab.GetProjectOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = returnFunc(pid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(interface{}, *gitlab.GetProjectOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = returnFunc(pid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockProjectsServices_GetProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProject'
type MockProjectsServices_GetProject_Call struct {
	*mock.Call
}

// GetProject is a helper method to define mock.On call
//   - pid interface{}
//   - opt *gitlab.GetProjectOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *MockProjectsServices_Expecter) GetProject(pid interface{}, opt interface{}, options ...interface{}) *MockProjectsServices_GetProject_Call {
	return &MockProjectsServices_GetProject_Call{Call: _e.mock.On("GetProject",
		append([]interface{}{pid, opt}, options...)...)}
}

func (_c *MockProjectsServices_GetProject_Call) Run(run func(pid interface{}, opt *gitlab.GetProjectOptions, options ...gitlab.RequestOptionFunc)) *MockProjectsServices_GetProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 interface{}
		if args[0] != nil {
			arg0 = args[0].(interface{})
		}
		var arg1 *gitlab.GetProjectOptions
		if args[1] != nil {
			arg1 = args[1].(*gitlab.GetProjectOptions)
		}
		var arg2 []gitlab.RequestOptionFunc
		var variadicArgs []gitlab.RequestOptionFunc
		if len(args) > 2 {
			variadicArgs = args[2].([]gitlab.RequestOptionFunc)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockProjectsServices_GetProject_Call) Return(project *gitlab.Project, response *gitlab.Response, err error) *MockProjectsServices_GetProject_Call {
	_c.Call.Return(project, response, err)
	return _c
}

func (_c *MockProjectsServices_GetProject_Call) RunAndReturn(run func(pid interface{}, opt *gitlab.GetProjectOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Project, *gitlab.Response, error)) *MockProjectsServices_GetProject_Call {
	_c.Call.Return(run)
	return _c
}

// ListProjectHooks provides a mock function for the type MockProjectsServices
func (_mock *MockProjectsServices) ListProjectHooks(pid interface{}, opt *gitlab.ListProjectHooksOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.ProjectHook, *gitlab.Response, error) {
	var tmpRet mock.Arguments
	if len(options) > 0 {
		tmpRet = _mock.Called(pid, opt, options)
	} else {
		tmpRet = _mock.Called(pid, opt)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListProjectHooks")
	}

	var r0 []*gitlab.ProjectHook
	var r1 *gitlab.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(interface{}, *gitlab.ListProjectHooksOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.ProjectHook, *gitlab.Response, error)); ok {
		return returnFunc(pid, opt, options...)
	}
	if returnFunc, ok := ret.Get(0).(func(interface{}, *gitlab.ListProjectHooksOptions, ...gitlab.RequestOptionFunc) []*gitlab.ProjectHook); ok {
		r0 = returnFunc(pid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.ProjectHook)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(interface{}, *gitlab.ListProjectHooksOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = returnFunc(pid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(interface{}, *gitlab.ListProjectHooksOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = returnFunc(pid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockProjectsServices_ListProjectHooks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProjectHooks'
type MockProjectsServices_ListProjectHooks_Call struct {
	*mock.Call
}

// ListProjectHooks is a helper method to define mock.On call
//   - pid interface{}
//   - opt *gitlab.ListProjectHooksOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *MockProjectsServices_Expecter) ListProjectHooks(pid interface{}, opt interface{}, options ...interface{}) *MockProjectsServices_ListProjectHooks_Call {
	return &MockProjectsServices_ListProjectHooks_Call{Call: _e.mock.On("ListProjectHooks",
		append([]interface{}{pid, opt}, options...)...)}
}

func (_c *MockProjectsServices_ListProjectHooks_Call) Run(run func(pid interface{}, opt *gitlab.ListProjectHooksOptions, options ...gitlab.RequestOptionFunc)) *MockProjectsServices_ListProjectHooks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 interface{}
		if args[0] != nil {
			arg0 = args[0].(interface{})
		}
		var arg1 *gitlab.ListProjectHooksOptions
		if args[1] != nil {
			arg1 = args[1].(*gitlab.ListProjectHooksOptions)
		}
		var arg2 []gitlab.RequestOptionFunc
		var variadicArgs []gitlab.RequestOptionFunc
		if len(args) > 2 {
			variadicArgs = args[2].([]gitlab.RequestOptionFunc)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockProjectsServices_ListProjectHooks_Call) Return(projectHooks []*gitlab.ProjectHook, response *gitlab.Response, err error) *MockProjectsServices_ListProjectHooks_Call {
	_c.Call.Return(projectHooks, response, err)
	return _c
}

func (_c *MockProjectsServices_ListProjectHooks_Call) RunAndReturn(run func(pid interface{}, opt *gitlab.ListProjectHooksOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.ProjectHook, *gitlab.Response, error)) *MockProjectsServices_ListProjectHooks_Call {
	_c.Call.Return(run)
	return _c
}
