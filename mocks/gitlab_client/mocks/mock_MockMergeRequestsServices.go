// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package gitlab_client

import (
	mock "github.com/stretchr/testify/mock"
	"github.com/xanzy/go-gitlab"
)

// NewMockMergeRequestsServices creates a new instance of MockMergeRequestsServices. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMergeRequestsServices(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMergeRequestsServices {
	mock := &MockMergeRequestsServices{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMergeRequestsServices is an autogenerated mock type for the MergeRequestsServices type
type MockMergeRequestsServices struct {
	mock.Mock
}

type MockMergeRequestsServices_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMergeRequestsServices) EXPECT() *MockMergeRequestsServices_Expecter {
	return &MockMergeRequestsServices_Expecter{mock: &_m.Mock}
}

// GetMergeRequest provides a mock function for the type MockMergeRequestsServices
func (_mock *MockMergeRequestsServices) GetMergeRequest(pid interface{}, mergeRequest int, opt *gitlab.GetMergeRequestsOptions, options ...gitlab.RequestOptionFunc) (*gitlab.MergeRequest, *gitlab.Response, error) {
	var tmpRet mock.Arguments
	if len(options) > 0 {
		tmpRet = _mock.Called(pid, mergeRequest, opt, options)
	} else {
		tmpRet = _mock.Called(pid, mergeRequest, opt)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetMergeRequest")
	}

	var r0 *gitlab.MergeRequest
	var r1 *gitlab.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(interface{}, int, *gitlab.GetMergeRequestsOptions, ...gitlab.RequestOptionFunc) (*gitlab.MergeRequest, *gitlab.Response, error)); ok {
		return returnFunc(pid, mergeRequest, opt, options...)
	}
	if returnFunc, ok := ret.Get(0).(func(interface{}, int, *gitlab.GetMergeRequestsOptions, ...gitlab.RequestOptionFunc) *gitlab.MergeRequest); ok {
		r0 = returnFunc(pid, mergeRequest, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.MergeRequest)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(interface{}, int, *gitlab.GetMergeRequestsOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = returnFunc(pid, mergeRequest, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(interface{}, int, *gitlab.GetMergeRequestsOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = returnFunc(pid, mergeRequest, opt, options...)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockMergeRequestsServices_GetMergeRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMergeRequest'
type MockMergeRequestsServices_GetMergeRequest_Call struct {
	*mock.Call
}

// GetMergeRequest is a helper method to define mock.On call
//   - pid interface{}
//   - mergeRequest int
//   - opt *gitlab.GetMergeRequestsOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *MockMergeRequestsServices_Expecter) GetMergeRequest(pid interface{}, mergeRequest interface{}, opt interface{}, options ...interface{}) *MockMergeRequestsServices_GetMergeRequest_Call {
	return &MockMergeRequestsServices_GetMergeRequest_Call{Call: _e.mock.On("GetMergeRequest",
		append([]interface{}{pid, mergeRequest, opt}, options...)...)}
}

func (_c *MockMergeRequestsServices_GetMergeRequest_Call) Run(run func(pid interface{}, mergeRequest int, opt *gitlab.GetMergeRequestsOptions, options ...gitlab.RequestOptionFunc)) *MockMergeRequestsServices_GetMergeRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 interface{}
		if args[0] != nil {
			arg0 = args[0].(interface{})
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 *gitlab.GetMergeRequestsOptions
		if args[2] != nil {
			arg2 = args[2].(*gitlab.GetMergeRequestsOptions)
		}
		var arg3 []gitlab.RequestOptionFunc
		var variadicArgs []gitlab.RequestOptionFunc
		if len(args) > 3 {
			variadicArgs = args[3].([]gitlab.RequestOptionFunc)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockMergeRequestsServices_GetMergeRequest_Call) Return(mergeRequest1 *gitlab.MergeRequest, response *gitlab.Response, err error) *MockMergeRequestsServices_GetMergeRequest_Call {
	_c.Call.Return(mergeRequest1, response, err)
	return _c
}

func (_c *MockMergeRequestsServices_GetMergeRequest_Call) RunAndReturn(run func(pid interface{}, mergeRequest int, opt *gitlab.GetMergeRequestsOptions, options ...gitlab.RequestOptionFunc) (*gitlab.MergeRequest, *gitlab.Response, error)) *MockMergeRequestsServices_GetMergeRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetMergeRequestChanges provides a mock function for the type MockMergeRequestsServices
func (_mock *MockMergeRequestsServices) GetMergeRequestChanges(pid interface{}, mergeRequest int, opt *gitlab.GetMergeRequestChangesOptions, options ...gitlab.RequestOptionFunc) (*gitlab.MergeRequest, *gitlab.Response, error) {
	var tmpRet mock.Arguments
	if len(options) > 0 {
		tmpRet = _mock.Called(pid, mergeRequest, opt, options)
	} else {
		tmpRet = _mock.Called(pid, mergeRequest, opt)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetMergeRequestChanges")
	}

	var r0 *gitlab.MergeRequest
	var r1 *gitlab.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(interface{}, int, *gitlab.GetMergeRequestChangesOptions, ...gitlab.RequestOptionFunc) (*gitlab.MergeRequest, *gitlab.Response, error)); ok {
		return returnFunc(pid, mergeRequest, opt, options...)
	}
	if returnFunc, ok := ret.Get(0).(func(interface{}, int, *gitlab.GetMergeRequestChangesOptions, ...gitlab.RequestOptionFunc) *gitlab.MergeRequest); ok {
		r0 = returnFunc(pid, mergeRequest, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.MergeRequest)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(interface{}, int, *gitlab.GetMergeRequestChangesOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = returnFunc(pid, mergeRequest, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(interface{}, int, *gitlab.GetMergeRequestChangesOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = returnFunc(pid, mergeRequest, opt, options...)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockMergeRequestsServices_GetMergeRequestChanges_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMergeRequestChanges'
type MockMergeRequestsServices_GetMergeRequestChanges_Call struct {
	*mock.Call
}

// GetMergeRequestChanges is a helper method to define mock.On call
//   - pid interface{}
//   - mergeRequest int
//   - opt *gitlab.GetMergeRequestChangesOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *MockMergeRequestsServices_Expecter) GetMergeRequestChanges(pid interface{}, mergeRequest interface{}, opt interface{}, options ...interface{}) *MockMergeRequestsServices_GetMergeRequestChanges_Call {
	return &MockMergeRequestsServices_GetMergeRequestChanges_Call{Call: _e.mock.On("GetMergeRequestChanges",
		append([]interface{}{pid, mergeRequest, opt}, options...)...)}
}

func (_c *MockMergeRequestsServices_GetMergeRequestChanges_Call) Run(run func(pid interface{}, mergeRequest int, opt *gitlab.GetMergeRequestChangesOptions, options ...gitlab.RequestOptionFunc)) *MockMergeRequestsServices_GetMergeRequestChanges_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 interface{}
		if args[0] != nil {
			arg0 = args[0].(interface{})
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 *gitlab.GetMergeRequestChangesOptions
		if args[2] != nil {
			arg2 = args[2].(*gitlab.GetMergeRequestChangesOptions)
		}
		var arg3 []gitlab.RequestOptionFunc
		var variadicArgs []gitlab.RequestOptionFunc
		if len(args) > 3 {
			variadicArgs = args[3].([]gitlab.RequestOptionFunc)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockMergeRequestsServices_GetMergeRequestChanges_Call) Return(mergeRequest1 *gitlab.MergeRequest, response *gitlab.Response, err error) *MockMergeRequestsServices_GetMergeRequestChanges_Call {
	_c.Call.Return(mergeRequest1, response, err)
	return _c
}

func (_c *MockMergeRequestsServices_GetMergeRequestChanges_Call) RunAndReturn(run func(pid interface{}, mergeRequest int, opt *gitlab.GetMergeRequestChangesOptions, options ...gitlab.RequestOptionFunc) (*gitlab.MergeRequest, *gitlab.Response, error)) *MockMergeRequestsServices_GetMergeRequestChanges_Call {
	_c.Call.Return(run)
	return _c
}

// GetMergeRequestDiffVersions provides a mock function for the type MockMergeRequestsServices
func (_mock *MockMergeRequestsServices) GetMergeRequestDiffVersions(pid interface{}, mergeRequest int, opt *gitlab.GetMergeRequestDiffVersionsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.MergeRequestDiffVersion, *gitlab.Response, error) {
	var tmpRet mock.Arguments
	if len(options) > 0 {
		tmpRet = _mock.Called(pid, mergeRequest, opt, options)
	} else {
		tmpRet = _mock.Called(pid, mergeRequest, opt)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetMergeRequestDiffVersions")
	}

	var r0 []*gitlab.MergeRequestDiffVersion
	var r1 *gitlab.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(interface{}, int, *gitlab.GetMergeRequestDiffVersionsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.MergeRequestDiffVersion, *gitlab.Response, error)); ok {
		return returnFunc(pid, mergeRequest, opt, options...)
	}
	if returnFunc, ok := ret.Get(0).(func(interface{}, int, *gitlab.GetMergeRequestDiffVersionsOptions, ...gitlab.RequestOptionFunc) []*gitlab.MergeRequestDiffVersion); ok {
		r0 = returnFunc(pid, mergeRequest, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.MergeRequestDiffVersion)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(interface{}, int, *gitlab.GetMergeRequestDiffVersionsOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = returnFunc(pid, mergeRequest, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(interface{}, int, *gitlab.GetMergeRequestDiffVersionsOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = returnFunc(pid, mergeRequest, opt, options...)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockMergeRequestsServices_GetMergeRequestDiffVersions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMergeRequestDiffVersions'
type MockMergeRequestsServices_GetMergeRequestDiffVersions_Call struct {
	*mock.Call
}

// GetMergeRequestDiffVersions is a helper method to define mock.On call
//   - pid interface{}
//   - mergeRequest int
//   - opt *gitlab.GetMergeRequestDiffVersionsOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *MockMergeRequestsServices_Expecter) GetMergeRequestDiffVersions(pid interface{}, mergeRequest interface{}, opt interface{}, options ...interface{}) *MockMergeRequestsServices_GetMergeRequestDiffVersions_Call {
	return &MockMergeRequestsServices_GetMergeRequestDiffVersions_Call{Call: _e.mock.On("GetMergeRequestDiffVersions",
		append([]interface{}{pid, mergeRequest, opt}, options...)...)}
}

func (_c *MockMergeRequestsServices_GetMergeRequestDiffVersions_Call) Run(run func(pid interface{}, mergeRequest int, opt *gitlab.GetMergeRequestDiffVersionsOptions, options ...gitlab.RequestOptionFunc)) *MockMergeRequestsServices_GetMergeRequestDiffVersions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 interface{}
		if args[0] != nil {
			arg0 = args[0].(interface{})
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 *gitlab.GetMergeRequestDiffVersionsOptions
		if args[2] != nil {
			arg2 = args[2].(*gitlab.GetMergeRequestDiffVersionsOptions)
		}
		var arg3 []gitlab.RequestOptionFunc
		var variadicArgs []gitlab.RequestOptionFunc
		if len(args) > 3 {
			variadicArgs = args[3].([]gitlab.RequestOptionFunc)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockMergeRequestsServices_GetMergeRequestDiffVersions_Call) Return(mergeRequestDiffVersions []*gitlab.MergeRequestDiffVersion, response *gitlab.Response, err error) *MockMergeRequestsServices_GetMergeRequestDiffVersions_Call {
	_c.Call.Return(mergeRequestDiffVersions, response, err)
	return _c
}

func (_c *MockMergeRequestsServices_GetMergeRequestDiffVersions_Call) RunAndReturn(run func(pid interface{}, mergeRequest int, opt *gitlab.GetMergeRequestDiffVersionsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.MergeRequestDiffVersion, *gitlab.Response, error)) *MockMergeRequestsServices_GetMergeRequestDiffVersions_Call {
	_c.Call.Return(run)
	return _c
}

// ListMergeRequestDiffs provides a mock function for the type MockMergeRequestsServices
func (_mock *MockMergeRequestsServices) ListMergeRequestDiffs(pid interface{}, mergeRequest int, opt *gitlab.ListMergeRequestDiffsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.MergeRequestDiff, *gitlab.Response, error) {
	var tmpRet mock.Arguments
	if len(options) > 0 {
		tmpRet = _mock.Called(pid, mergeRequest, opt, options)
	} else {
		tmpRet = _mock.Called(pid, mergeRequest, opt)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListMergeRequestDiffs")
	}

	var r0 []*gitlab.MergeRequestDiff
	var r1 *gitlab.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(interface{}, int, *gitlab.ListMergeRequestDiffsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.MergeRequestDiff, *gitlab.Response, error)); ok {
		return returnFunc(pid, mergeRequest, opt, options...)
	}
	if returnFunc, ok := ret.Get(0).(func(interface{}, int, *gitlab.ListMergeRequestDiffsOptions, ...gitlab.RequestOptionFunc) []*gitlab.MergeRequestDiff); ok {
		r0 = returnFunc(pid, mergeRequest, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.MergeRequestDiff)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(interface{}, int, *gitlab.ListMergeRequestDiffsOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = returnFunc(pid, mergeRequest, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(interface{}, int, *gitlab.ListMergeRequestDiffsOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = returnFunc(pid, mergeRequest, opt, options...)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockMergeRequestsServices_ListMergeRequestDiffs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListMergeRequestDiffs'
type MockMergeRequestsServices_ListMergeRequestDiffs_Call struct {
	*mock.Call
}

// ListMergeRequestDiffs is a helper method to define mock.On call
//   - pid interface{}
//   - mergeRequest int
//   - opt *gitlab.ListMergeRequestDiffsOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *MockMergeRequestsServices_Expecter) ListMergeRequestDiffs(pid interface{}, mergeRequest interface{}, opt interface{}, options ...interface{}) *MockMergeRequestsServices_ListMergeRequestDiffs_Call {
	return &MockMergeRequestsServices_ListMergeRequestDiffs_Call{Call: _e.mock.On("ListMergeRequestDiffs",
		append([]interface{}{pid, mergeRequest, opt}, options...)...)}
}

func (_c *MockMergeRequestsServices_ListMergeRequestDiffs_Call) Run(run func(pid interface{}, mergeRequest int, opt *gitlab.ListMergeRequestDiffsOptions, options ...gitlab.RequestOptionFunc)) *MockMergeRequestsServices_ListMergeRequestDiffs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 interface{}
		if args[0] != nil {
			arg0 = args[0].(interface{})
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 *gitlab.ListMergeRequestDiffsOptions
		if args[2] != nil {
			arg2 = args[2].(*gitlab.ListMergeRequestDiffsOptions)
		}
		var arg3 []gitlab.RequestOptionFunc
		var variadicArgs []gitlab.RequestOptionFunc
		if len(args) > 3 {
			variadicArgs = args[3].([]gitlab.RequestOptionFunc)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockMergeRequestsServices_ListMergeRequestDiffs_Call) Return(mergeRequestDiffs []*gitlab.MergeRequestDiff, response *gitlab.Response, err error) *MockMergeRequestsServices_ListMergeRequestDiffs_Call {
	_c.Call.Return(mergeRequestDiffs, response, err)
	return _c
}

func (_c *MockMergeRequestsServices_ListMergeRequestDiffs_Call) RunAndReturn(run func(pid interface{}, mergeRequest int, opt *gitlab.ListMergeRequestDiffsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.MergeRequestDiff, *gitlab.Response, error)) *MockMergeRequestsServices_ListMergeRequestDiffs_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateMergeRequest provides a mock function for the type MockMergeRequestsServices
func (_mock *MockMergeRequestsServices) UpdateMergeRequest(pid interface{}, mergeRequest int, opt *gitlab.UpdateMergeRequestOptions, options ...gitlab.RequestOptionFunc) (*gitlab.MergeRequest, *gitlab.Response, error) {
	var tmpRet mock.Arguments
	if len(options) > 0 {
		tmpRet = _mock.Called(pid, mergeRequest, opt, options)
	} else {
		tmpRet = _mock.Called(pid, mergeRequest, opt)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateMergeRequest")
	}

	var r0 *gitlab.MergeRequest
	var r1 *gitlab.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(interface{}, int, *gitlab.UpdateMergeRequestOptions, ...gitlab.RequestOptionFunc) (*gitlab.MergeRequest, *gitlab.Response, error)); ok {
		return returnFunc(pid, mergeRequest, opt, options...)
	}
	if returnFunc, ok := ret.Get(0).(func(interface{}, int, *gitlab.UpdateMergeRequestOptions, ...gitlab.RequestOptionFunc) *gitlab.MergeRequest); ok {
		r0 = returnFunc(pid, mergeRequest, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.MergeRequest)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(interface{}, int, *gitlab.UpdateMergeRequestOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = returnFunc(pid, mergeRequest, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(interface{}, int, *gitlab.UpdateMergeRequestOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = returnFunc(pid, mergeRequest, opt, options...)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockMergeRequestsServices_UpdateMergeRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateMergeRequest'
type MockMergeRequestsServices_UpdateMergeRequest_Call struct {
	*mock.Call
}

// UpdateMergeRequest is a helper method to define mock.On call
//   - pid interface{}
//   - mergeRequest int
//   - opt *gitlab.UpdateMergeRequestOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *MockMergeRequestsServices_Expecter) UpdateMergeRequest(pid interface{}, mergeRequest interface{}, opt interface{}, options ...interface{}) *MockMergeRequestsServices_UpdateMergeRequest_Call {
	return &MockMergeRequestsServices_UpdateMergeRequest_Call{Call: _e.mock.On("UpdateMergeRequest",
		append([]interface{}{pid, mergeRequest, opt}, options...)...)}
}

func (_c *MockMergeRequestsServices_UpdateMergeRequest_Call) Run(run func(pid interface{}, mergeRequest int, opt *gitlab.UpdateMergeRequestOptions, options ...gitlab.RequestOptionFunc)) *MockMergeRequestsServices_UpdateMergeRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 interface{}
		if args[0] != nil {
			arg0 = args[0].(interface{})
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 *gitlab.UpdateMergeRequestOptions
		if args[2] != nil {
			arg2 = args[2].(*gitlab.UpdateMergeRequestOptions)
		}
		var arg3 []gitlab.RequestOptionFunc
		var variadicArgs []gitlab.RequestOptionFunc
		if len(args) > 3 {
			variadicArgs = args[3].([]gitlab.RequestOptionFunc)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockMergeRequestsServices_UpdateMergeRequest_Call) Return(mergeRequest1 *gitlab.MergeRequest, response *gitlab.Response, err error) *MockMergeRequestsServices_UpdateMergeRequest_Call {
	_c.Call.Return(mergeRequest1, response, err)
	return _c
}

func (_c *MockMergeRequestsServices_UpdateMergeRequest_Call) RunAndReturn(run func(pid interface{}, mergeRequest int, opt *gitlab.UpdateMergeRequestOptions, options ...gitlab.RequestOptionFunc) (*gitlab.MergeRequest, *gitlab.Response, error)) *MockMergeRequestsServices_UpdateMergeRequest_Call {
	_c.Call.Return(run)
	return _c
}
