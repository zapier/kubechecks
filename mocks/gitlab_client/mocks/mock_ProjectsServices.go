// Code generated by mockery v2.37.1. DO NOT EDIT.

package gitlab_client

import (
	gitlab "github.com/xanzy/go-gitlab"

	mock "github.com/stretchr/testify/mock"
)

// MockProjectsServices is an autogenerated mock type for the ProjectsServices type
type MockProjectsServices struct {
	mock.Mock
}

type MockProjectsServices_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProjectsServices) EXPECT() *MockProjectsServices_Expecter {
	return &MockProjectsServices_Expecter{mock: &_m.Mock}
}

// AddProjectHook provides a mock function with given fields: pid, opt, options
func (_m *MockProjectsServices) AddProjectHook(pid interface{}, opt *gitlab.AddProjectHookOptions, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectHook, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gitlab.ProjectHook
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.AddProjectHookOptions, ...gitlab.RequestOptionFunc) (*gitlab.ProjectHook, *gitlab.Response, error)); ok {
		return rf(pid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.AddProjectHookOptions, ...gitlab.RequestOptionFunc) *gitlab.ProjectHook); ok {
		r0 = rf(pid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.ProjectHook)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.AddProjectHookOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.AddProjectHookOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockProjectsServices_AddProjectHook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddProjectHook'
type MockProjectsServices_AddProjectHook_Call struct {
	*mock.Call
}

// AddProjectHook is a helper method to define mock.On call
//   - pid interface{}
//   - opt *gitlab.AddProjectHookOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *MockProjectsServices_Expecter) AddProjectHook(pid interface{}, opt interface{}, options ...interface{}) *MockProjectsServices_AddProjectHook_Call {
	return &MockProjectsServices_AddProjectHook_Call{Call: _e.mock.On("AddProjectHook",
		append([]interface{}{pid, opt}, options...)...)}
}

func (_c *MockProjectsServices_AddProjectHook_Call) Run(run func(pid interface{}, opt *gitlab.AddProjectHookOptions, options ...gitlab.RequestOptionFunc)) *MockProjectsServices_AddProjectHook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.AddProjectHookOptions), variadicArgs...)
	})
	return _c
}

func (_c *MockProjectsServices_AddProjectHook_Call) Return(_a0 *gitlab.ProjectHook, _a1 *gitlab.Response, _a2 error) *MockProjectsServices_AddProjectHook_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockProjectsServices_AddProjectHook_Call) RunAndReturn(run func(interface{}, *gitlab.AddProjectHookOptions, ...gitlab.RequestOptionFunc) (*gitlab.ProjectHook, *gitlab.Response, error)) *MockProjectsServices_AddProjectHook_Call {
	_c.Call.Return(run)
	return _c
}

// EditProjectHook provides a mock function with given fields: pid, hook, opt, options
func (_m *MockProjectsServices) EditProjectHook(pid interface{}, hook int, opt *gitlab.EditProjectHookOptions, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectHook, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, hook, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gitlab.ProjectHook
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.EditProjectHookOptions, ...gitlab.RequestOptionFunc) (*gitlab.ProjectHook, *gitlab.Response, error)); ok {
		return rf(pid, hook, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int, *gitlab.EditProjectHookOptions, ...gitlab.RequestOptionFunc) *gitlab.ProjectHook); ok {
		r0 = rf(pid, hook, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.ProjectHook)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int, *gitlab.EditProjectHookOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, hook, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int, *gitlab.EditProjectHookOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, hook, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockProjectsServices_EditProjectHook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EditProjectHook'
type MockProjectsServices_EditProjectHook_Call struct {
	*mock.Call
}

// EditProjectHook is a helper method to define mock.On call
//   - pid interface{}
//   - hook int
//   - opt *gitlab.EditProjectHookOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *MockProjectsServices_Expecter) EditProjectHook(pid interface{}, hook interface{}, opt interface{}, options ...interface{}) *MockProjectsServices_EditProjectHook_Call {
	return &MockProjectsServices_EditProjectHook_Call{Call: _e.mock.On("EditProjectHook",
		append([]interface{}{pid, hook, opt}, options...)...)}
}

func (_c *MockProjectsServices_EditProjectHook_Call) Run(run func(pid interface{}, hook int, opt *gitlab.EditProjectHookOptions, options ...gitlab.RequestOptionFunc)) *MockProjectsServices_EditProjectHook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(int), args[2].(*gitlab.EditProjectHookOptions), variadicArgs...)
	})
	return _c
}

func (_c *MockProjectsServices_EditProjectHook_Call) Return(_a0 *gitlab.ProjectHook, _a1 *gitlab.Response, _a2 error) *MockProjectsServices_EditProjectHook_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockProjectsServices_EditProjectHook_Call) RunAndReturn(run func(interface{}, int, *gitlab.EditProjectHookOptions, ...gitlab.RequestOptionFunc) (*gitlab.ProjectHook, *gitlab.Response, error)) *MockProjectsServices_EditProjectHook_Call {
	_c.Call.Return(run)
	return _c
}

// GetProject provides a mock function with given fields: pid, opt, options
func (_m *MockProjectsServices) GetProject(pid interface{}, opt *gitlab.GetProjectOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Project, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gitlab.Project
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.GetProjectOptions, ...gitlab.RequestOptionFunc) (*gitlab.Project, *gitlab.Response, error)); ok {
		return rf(pid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.GetProjectOptions, ...gitlab.RequestOptionFunc) *gitlab.Project); ok {
		r0 = rf(pid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.GetProjectOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.GetProjectOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockProjectsServices_GetProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProject'
type MockProjectsServices_GetProject_Call struct {
	*mock.Call
}

// GetProject is a helper method to define mock.On call
//   - pid interface{}
//   - opt *gitlab.GetProjectOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *MockProjectsServices_Expecter) GetProject(pid interface{}, opt interface{}, options ...interface{}) *MockProjectsServices_GetProject_Call {
	return &MockProjectsServices_GetProject_Call{Call: _e.mock.On("GetProject",
		append([]interface{}{pid, opt}, options...)...)}
}

func (_c *MockProjectsServices_GetProject_Call) Run(run func(pid interface{}, opt *gitlab.GetProjectOptions, options ...gitlab.RequestOptionFunc)) *MockProjectsServices_GetProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.GetProjectOptions), variadicArgs...)
	})
	return _c
}

func (_c *MockProjectsServices_GetProject_Call) Return(_a0 *gitlab.Project, _a1 *gitlab.Response, _a2 error) *MockProjectsServices_GetProject_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockProjectsServices_GetProject_Call) RunAndReturn(run func(interface{}, *gitlab.GetProjectOptions, ...gitlab.RequestOptionFunc) (*gitlab.Project, *gitlab.Response, error)) *MockProjectsServices_GetProject_Call {
	_c.Call.Return(run)
	return _c
}

// ListProjectHooks provides a mock function with given fields: pid, opt, options
func (_m *MockProjectsServices) ListProjectHooks(pid interface{}, opt *gitlab.ListProjectHooksOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.ProjectHook, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []*gitlab.ProjectHook
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ListProjectHooksOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.ProjectHook, *gitlab.Response, error)); ok {
		return rf(pid, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, *gitlab.ListProjectHooksOptions, ...gitlab.RequestOptionFunc) []*gitlab.ProjectHook); ok {
		r0 = rf(pid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.ProjectHook)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, *gitlab.ListProjectHooksOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, *gitlab.ListProjectHooksOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockProjectsServices_ListProjectHooks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProjectHooks'
type MockProjectsServices_ListProjectHooks_Call struct {
	*mock.Call
}

// ListProjectHooks is a helper method to define mock.On call
//   - pid interface{}
//   - opt *gitlab.ListProjectHooksOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *MockProjectsServices_Expecter) ListProjectHooks(pid interface{}, opt interface{}, options ...interface{}) *MockProjectsServices_ListProjectHooks_Call {
	return &MockProjectsServices_ListProjectHooks_Call{Call: _e.mock.On("ListProjectHooks",
		append([]interface{}{pid, opt}, options...)...)}
}

func (_c *MockProjectsServices_ListProjectHooks_Call) Run(run func(pid interface{}, opt *gitlab.ListProjectHooksOptions, options ...gitlab.RequestOptionFunc)) *MockProjectsServices_ListProjectHooks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), args[1].(*gitlab.ListProjectHooksOptions), variadicArgs...)
	})
	return _c
}

func (_c *MockProjectsServices_ListProjectHooks_Call) Return(_a0 []*gitlab.ProjectHook, _a1 *gitlab.Response, _a2 error) *MockProjectsServices_ListProjectHooks_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockProjectsServices_ListProjectHooks_Call) RunAndReturn(run func(interface{}, *gitlab.ListProjectHooksOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.ProjectHook, *gitlab.Response, error)) *MockProjectsServices_ListProjectHooks_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProjectsServices creates a new instance of MockProjectsServices. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProjectsServices(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProjectsServices {
	mock := &MockProjectsServices{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
