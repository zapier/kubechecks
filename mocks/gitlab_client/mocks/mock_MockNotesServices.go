// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package gitlab_client

import (
	mock "github.com/stretchr/testify/mock"
	"github.com/xanzy/go-gitlab"
)

// NewMockNotesServices creates a new instance of MockNotesServices. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNotesServices(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNotesServices {
	mock := &MockNotesServices{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockNotesServices is an autogenerated mock type for the NotesServices type
type MockNotesServices struct {
	mock.Mock
}

type MockNotesServices_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNotesServices) EXPECT() *MockNotesServices_Expecter {
	return &MockNotesServices_Expecter{mock: &_m.Mock}
}

// CreateMergeRequestNote provides a mock function for the type MockNotesServices
func (_mock *MockNotesServices) CreateMergeRequestNote(pid interface{}, mergeRequest int, opt *gitlab.CreateMergeRequestNoteOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Note, *gitlab.Response, error) {
	var tmpRet mock.Arguments
	if len(options) > 0 {
		tmpRet = _mock.Called(pid, mergeRequest, opt, options)
	} else {
		tmpRet = _mock.Called(pid, mergeRequest, opt)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateMergeRequestNote")
	}

	var r0 *gitlab.Note
	var r1 *gitlab.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(interface{}, int, *gitlab.CreateMergeRequestNoteOptions, ...gitlab.RequestOptionFunc) (*gitlab.Note, *gitlab.Response, error)); ok {
		return returnFunc(pid, mergeRequest, opt, options...)
	}
	if returnFunc, ok := ret.Get(0).(func(interface{}, int, *gitlab.CreateMergeRequestNoteOptions, ...gitlab.RequestOptionFunc) *gitlab.Note); ok {
		r0 = returnFunc(pid, mergeRequest, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Note)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(interface{}, int, *gitlab.CreateMergeRequestNoteOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = returnFunc(pid, mergeRequest, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(interface{}, int, *gitlab.CreateMergeRequestNoteOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = returnFunc(pid, mergeRequest, opt, options...)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockNotesServices_CreateMergeRequestNote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMergeRequestNote'
type MockNotesServices_CreateMergeRequestNote_Call struct {
	*mock.Call
}

// CreateMergeRequestNote is a helper method to define mock.On call
//   - pid interface{}
//   - mergeRequest int
//   - opt *gitlab.CreateMergeRequestNoteOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *MockNotesServices_Expecter) CreateMergeRequestNote(pid interface{}, mergeRequest interface{}, opt interface{}, options ...interface{}) *MockNotesServices_CreateMergeRequestNote_Call {
	return &MockNotesServices_CreateMergeRequestNote_Call{Call: _e.mock.On("CreateMergeRequestNote",
		append([]interface{}{pid, mergeRequest, opt}, options...)...)}
}

func (_c *MockNotesServices_CreateMergeRequestNote_Call) Run(run func(pid interface{}, mergeRequest int, opt *gitlab.CreateMergeRequestNoteOptions, options ...gitlab.RequestOptionFunc)) *MockNotesServices_CreateMergeRequestNote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 interface{}
		if args[0] != nil {
			arg0 = args[0].(interface{})
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 *gitlab.CreateMergeRequestNoteOptions
		if args[2] != nil {
			arg2 = args[2].(*gitlab.CreateMergeRequestNoteOptions)
		}
		var arg3 []gitlab.RequestOptionFunc
		var variadicArgs []gitlab.RequestOptionFunc
		if len(args) > 3 {
			variadicArgs = args[3].([]gitlab.RequestOptionFunc)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockNotesServices_CreateMergeRequestNote_Call) Return(note *gitlab.Note, response *gitlab.Response, err error) *MockNotesServices_CreateMergeRequestNote_Call {
	_c.Call.Return(note, response, err)
	return _c
}

func (_c *MockNotesServices_CreateMergeRequestNote_Call) RunAndReturn(run func(pid interface{}, mergeRequest int, opt *gitlab.CreateMergeRequestNoteOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Note, *gitlab.Response, error)) *MockNotesServices_CreateMergeRequestNote_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteMergeRequestNote provides a mock function for the type MockNotesServices
func (_mock *MockNotesServices) DeleteMergeRequestNote(pid interface{}, mergeRequest int, note int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	var tmpRet mock.Arguments
	if len(options) > 0 {
		tmpRet = _mock.Called(pid, mergeRequest, note, options)
	} else {
		tmpRet = _mock.Called(pid, mergeRequest, note)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteMergeRequestNote")
	}

	var r0 *gitlab.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(interface{}, int, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)); ok {
		return returnFunc(pid, mergeRequest, note, options...)
	}
	if returnFunc, ok := ret.Get(0).(func(interface{}, int, int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r0 = returnFunc(pid, mergeRequest, note, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(interface{}, int, int, ...gitlab.RequestOptionFunc) error); ok {
		r1 = returnFunc(pid, mergeRequest, note, options...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockNotesServices_DeleteMergeRequestNote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMergeRequestNote'
type MockNotesServices_DeleteMergeRequestNote_Call struct {
	*mock.Call
}

// DeleteMergeRequestNote is a helper method to define mock.On call
//   - pid interface{}
//   - mergeRequest int
//   - note int
//   - options ...gitlab.RequestOptionFunc
func (_e *MockNotesServices_Expecter) DeleteMergeRequestNote(pid interface{}, mergeRequest interface{}, note interface{}, options ...interface{}) *MockNotesServices_DeleteMergeRequestNote_Call {
	return &MockNotesServices_DeleteMergeRequestNote_Call{Call: _e.mock.On("DeleteMergeRequestNote",
		append([]interface{}{pid, mergeRequest, note}, options...)...)}
}

func (_c *MockNotesServices_DeleteMergeRequestNote_Call) Run(run func(pid interface{}, mergeRequest int, note int, options ...gitlab.RequestOptionFunc)) *MockNotesServices_DeleteMergeRequestNote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 interface{}
		if args[0] != nil {
			arg0 = args[0].(interface{})
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		var arg3 []gitlab.RequestOptionFunc
		var variadicArgs []gitlab.RequestOptionFunc
		if len(args) > 3 {
			variadicArgs = args[3].([]gitlab.RequestOptionFunc)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockNotesServices_DeleteMergeRequestNote_Call) Return(response *gitlab.Response, err error) *MockNotesServices_DeleteMergeRequestNote_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockNotesServices_DeleteMergeRequestNote_Call) RunAndReturn(run func(pid interface{}, mergeRequest int, note int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockNotesServices_DeleteMergeRequestNote_Call {
	_c.Call.Return(run)
	return _c
}

// ListMergeRequestNotes provides a mock function for the type MockNotesServices
func (_mock *MockNotesServices) ListMergeRequestNotes(pid interface{}, mergeRequest int, opt *gitlab.ListMergeRequestNotesOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Note, *gitlab.Response, error) {
	var tmpRet mock.Arguments
	if len(options) > 0 {
		tmpRet = _mock.Called(pid, mergeRequest, opt, options)
	} else {
		tmpRet = _mock.Called(pid, mergeRequest, opt)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListMergeRequestNotes")
	}

	var r0 []*gitlab.Note
	var r1 *gitlab.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(interface{}, int, *gitlab.ListMergeRequestNotesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.Note, *gitlab.Response, error)); ok {
		return returnFunc(pid, mergeRequest, opt, options...)
	}
	if returnFunc, ok := ret.Get(0).(func(interface{}, int, *gitlab.ListMergeRequestNotesOptions, ...gitlab.RequestOptionFunc) []*gitlab.Note); ok {
		r0 = returnFunc(pid, mergeRequest, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.Note)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(interface{}, int, *gitlab.ListMergeRequestNotesOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = returnFunc(pid, mergeRequest, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(interface{}, int, *gitlab.ListMergeRequestNotesOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = returnFunc(pid, mergeRequest, opt, options...)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockNotesServices_ListMergeRequestNotes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListMergeRequestNotes'
type MockNotesServices_ListMergeRequestNotes_Call struct {
	*mock.Call
}

// ListMergeRequestNotes is a helper method to define mock.On call
//   - pid interface{}
//   - mergeRequest int
//   - opt *gitlab.ListMergeRequestNotesOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *MockNotesServices_Expecter) ListMergeRequestNotes(pid interface{}, mergeRequest interface{}, opt interface{}, options ...interface{}) *MockNotesServices_ListMergeRequestNotes_Call {
	return &MockNotesServices_ListMergeRequestNotes_Call{Call: _e.mock.On("ListMergeRequestNotes",
		append([]interface{}{pid, mergeRequest, opt}, options...)...)}
}

func (_c *MockNotesServices_ListMergeRequestNotes_Call) Run(run func(pid interface{}, mergeRequest int, opt *gitlab.ListMergeRequestNotesOptions, options ...gitlab.RequestOptionFunc)) *MockNotesServices_ListMergeRequestNotes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 interface{}
		if args[0] != nil {
			arg0 = args[0].(interface{})
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 *gitlab.ListMergeRequestNotesOptions
		if args[2] != nil {
			arg2 = args[2].(*gitlab.ListMergeRequestNotesOptions)
		}
		var arg3 []gitlab.RequestOptionFunc
		var variadicArgs []gitlab.RequestOptionFunc
		if len(args) > 3 {
			variadicArgs = args[3].([]gitlab.RequestOptionFunc)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockNotesServices_ListMergeRequestNotes_Call) Return(notes []*gitlab.Note, response *gitlab.Response, err error) *MockNotesServices_ListMergeRequestNotes_Call {
	_c.Call.Return(notes, response, err)
	return _c
}

func (_c *MockNotesServices_ListMergeRequestNotes_Call) RunAndReturn(run func(pid interface{}, mergeRequest int, opt *gitlab.ListMergeRequestNotesOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Note, *gitlab.Response, error)) *MockNotesServices_ListMergeRequestNotes_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateMergeRequestNote provides a mock function for the type MockNotesServices
func (_mock *MockNotesServices) UpdateMergeRequestNote(pid interface{}, mergeRequest int, note int, opt *gitlab.UpdateMergeRequestNoteOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Note, *gitlab.Response, error) {
	var tmpRet mock.Arguments
	if len(options) > 0 {
		tmpRet = _mock.Called(pid, mergeRequest, note, opt, options)
	} else {
		tmpRet = _mock.Called(pid, mergeRequest, note, opt)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateMergeRequestNote")
	}

	var r0 *gitlab.Note
	var r1 *gitlab.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(interface{}, int, int, *gitlab.UpdateMergeRequestNoteOptions, ...gitlab.RequestOptionFunc) (*gitlab.Note, *gitlab.Response, error)); ok {
		return returnFunc(pid, mergeRequest, note, opt, options...)
	}
	if returnFunc, ok := ret.Get(0).(func(interface{}, int, int, *gitlab.UpdateMergeRequestNoteOptions, ...gitlab.RequestOptionFunc) *gitlab.Note); ok {
		r0 = returnFunc(pid, mergeRequest, note, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Note)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(interface{}, int, int, *gitlab.UpdateMergeRequestNoteOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = returnFunc(pid, mergeRequest, note, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(interface{}, int, int, *gitlab.UpdateMergeRequestNoteOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = returnFunc(pid, mergeRequest, note, opt, options...)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockNotesServices_UpdateMergeRequestNote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateMergeRequestNote'
type MockNotesServices_UpdateMergeRequestNote_Call struct {
	*mock.Call
}

// UpdateMergeRequestNote is a helper method to define mock.On call
//   - pid interface{}
//   - mergeRequest int
//   - note int
//   - opt *gitlab.UpdateMergeRequestNoteOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *MockNotesServices_Expecter) UpdateMergeRequestNote(pid interface{}, mergeRequest interface{}, note interface{}, opt interface{}, options ...interface{}) *MockNotesServices_UpdateMergeRequestNote_Call {
	return &MockNotesServices_UpdateMergeRequestNote_Call{Call: _e.mock.On("UpdateMergeRequestNote",
		append([]interface{}{pid, mergeRequest, note, opt}, options...)...)}
}

func (_c *MockNotesServices_UpdateMergeRequestNote_Call) Run(run func(pid interface{}, mergeRequest int, note int, opt *gitlab.UpdateMergeRequestNoteOptions, options ...gitlab.RequestOptionFunc)) *MockNotesServices_UpdateMergeRequestNote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 interface{}
		if args[0] != nil {
			arg0 = args[0].(interface{})
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		var arg3 *gitlab.UpdateMergeRequestNoteOptions
		if args[3] != nil {
			arg3 = args[3].(*gitlab.UpdateMergeRequestNoteOptions)
		}
		var arg4 []gitlab.RequestOptionFunc
		var variadicArgs []gitlab.RequestOptionFunc
		if len(args) > 4 {
			variadicArgs = args[4].([]gitlab.RequestOptionFunc)
		}
		arg4 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4...,
		)
	})
	return _c
}

func (_c *MockNotesServices_UpdateMergeRequestNote_Call) Return(note1 *gitlab.Note, response *gitlab.Response, err error) *MockNotesServices_UpdateMergeRequestNote_Call {
	_c.Call.Return(note1, response, err)
	return _c
}

func (_c *MockNotesServices_UpdateMergeRequestNote_Call) RunAndReturn(run func(pid interface{}, mergeRequest int, note int, opt *gitlab.UpdateMergeRequestNoteOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Note, *gitlab.Response, error)) *MockNotesServices_UpdateMergeRequestNote_Call {
	_c.Call.Return(run)
	return _c
}
