// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package affected_apps

import (
	"context"

	"github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1"
	mock "github.com/stretchr/testify/mock"
)

// newMockargoClient creates a new instance of mockargoClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockargoClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockargoClient {
	mock := &mockargoClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockargoClient is an autogenerated mock type for the argoClient type
type mockargoClient struct {
	mock.Mock
}

type mockargoClient_Expecter struct {
	mock *mock.Mock
}

func (_m *mockargoClient) EXPECT() *mockargoClient_Expecter {
	return &mockargoClient_Expecter{mock: &_m.Mock}
}

// GetApplications provides a mock function for the type mockargoClient
func (_mock *mockargoClient) GetApplications(ctx context.Context) (*v1alpha1.ApplicationList, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetApplications")
	}

	var r0 *v1alpha1.ApplicationList
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (*v1alpha1.ApplicationList, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) *v1alpha1.ApplicationList); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.ApplicationList)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockargoClient_GetApplications_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetApplications'
type mockargoClient_GetApplications_Call struct {
	*mock.Call
}

// GetApplications is a helper method to define mock.On call
//   - ctx context.Context
func (_e *mockargoClient_Expecter) GetApplications(ctx interface{}) *mockargoClient_GetApplications_Call {
	return &mockargoClient_GetApplications_Call{Call: _e.mock.On("GetApplications", ctx)}
}

func (_c *mockargoClient_GetApplications_Call) Run(run func(ctx context.Context)) *mockargoClient_GetApplications_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *mockargoClient_GetApplications_Call) Return(applicationList *v1alpha1.ApplicationList, err error) *mockargoClient_GetApplications_Call {
	_c.Call.Return(applicationList, err)
	return _c
}

func (_c *mockargoClient_GetApplications_Call) RunAndReturn(run func(ctx context.Context) (*v1alpha1.ApplicationList, error)) *mockargoClient_GetApplications_Call {
	_c.Call.Return(run)
	return _c
}

// GetApplicationsByAppset provides a mock function for the type mockargoClient
func (_mock *mockargoClient) GetApplicationsByAppset(ctx context.Context, appsetName string) (*v1alpha1.ApplicationList, error) {
	ret := _mock.Called(ctx, appsetName)

	if len(ret) == 0 {
		panic("no return value specified for GetApplicationsByAppset")
	}

	var r0 *v1alpha1.ApplicationList
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*v1alpha1.ApplicationList, error)); ok {
		return returnFunc(ctx, appsetName)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *v1alpha1.ApplicationList); ok {
		r0 = returnFunc(ctx, appsetName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.ApplicationList)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, appsetName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockargoClient_GetApplicationsByAppset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetApplicationsByAppset'
type mockargoClient_GetApplicationsByAppset_Call struct {
	*mock.Call
}

// GetApplicationsByAppset is a helper method to define mock.On call
//   - ctx context.Context
//   - appsetName string
func (_e *mockargoClient_Expecter) GetApplicationsByAppset(ctx interface{}, appsetName interface{}) *mockargoClient_GetApplicationsByAppset_Call {
	return &mockargoClient_GetApplicationsByAppset_Call{Call: _e.mock.On("GetApplicationsByAppset", ctx, appsetName)}
}

func (_c *mockargoClient_GetApplicationsByAppset_Call) Run(run func(ctx context.Context, appsetName string)) *mockargoClient_GetApplicationsByAppset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *mockargoClient_GetApplicationsByAppset_Call) Return(applicationList *v1alpha1.ApplicationList, err error) *mockargoClient_GetApplicationsByAppset_Call {
	_c.Call.Return(applicationList, err)
	return _c
}

func (_c *mockargoClient_GetApplicationsByAppset_Call) RunAndReturn(run func(ctx context.Context, appsetName string) (*v1alpha1.ApplicationList, error)) *mockargoClient_GetApplicationsByAppset_Call {
	_c.Call.Return(run)
	return _c
}
