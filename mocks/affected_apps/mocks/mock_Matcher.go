// Code generated by mockery v2.37.1. DO NOT EDIT.

package affected_apps

import (
	context "context"

	affected_apps "github.com/zapier/kubechecks/pkg/affected_apps"

	git "github.com/zapier/kubechecks/pkg/git"

	mock "github.com/stretchr/testify/mock"
)

// MockMatcher is an autogenerated mock type for the Matcher type
type MockMatcher struct {
	mock.Mock
}

type MockMatcher_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMatcher) EXPECT() *MockMatcher_Expecter {
	return &MockMatcher_Expecter{mock: &_m.Mock}
}

// AffectedApps provides a mock function with given fields: ctx, changeList, targetBranch, repo
func (_m *MockMatcher) AffectedApps(ctx context.Context, changeList []string, targetBranch string, repo *git.Repo) (affected_apps.AffectedItems, error) {
	ret := _m.Called(ctx, changeList, targetBranch, repo)

	var r0 affected_apps.AffectedItems
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string, string, *git.Repo) (affected_apps.AffectedItems, error)); ok {
		return rf(ctx, changeList, targetBranch, repo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string, string, *git.Repo) affected_apps.AffectedItems); ok {
		r0 = rf(ctx, changeList, targetBranch, repo)
	} else {
		r0 = ret.Get(0).(affected_apps.AffectedItems)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string, string, *git.Repo) error); ok {
		r1 = rf(ctx, changeList, targetBranch, repo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMatcher_AffectedApps_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AffectedApps'
type MockMatcher_AffectedApps_Call struct {
	*mock.Call
}

// AffectedApps is a helper method to define mock.On call
//   - ctx context.Context
//   - changeList []string
//   - targetBranch string
//   - repo *git.Repo
func (_e *MockMatcher_Expecter) AffectedApps(ctx interface{}, changeList interface{}, targetBranch interface{}, repo interface{}) *MockMatcher_AffectedApps_Call {
	return &MockMatcher_AffectedApps_Call{Call: _e.mock.On("AffectedApps", ctx, changeList, targetBranch, repo)}
}

func (_c *MockMatcher_AffectedApps_Call) Run(run func(ctx context.Context, changeList []string, targetBranch string, repo *git.Repo)) *MockMatcher_AffectedApps_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string), args[2].(string), args[3].(*git.Repo))
	})
	return _c
}

func (_c *MockMatcher_AffectedApps_Call) Return(_a0 affected_apps.AffectedItems, _a1 error) *MockMatcher_AffectedApps_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMatcher_AffectedApps_Call) RunAndReturn(run func(context.Context, []string, string, *git.Repo) (affected_apps.AffectedItems, error)) *MockMatcher_AffectedApps_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMatcher creates a new instance of MockMatcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMatcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMatcher {
	mock := &MockMatcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
